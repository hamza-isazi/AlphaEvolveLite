db_uri: sqlite:///alphaevolve.db

experiment:
  label: timetable-optimization-v1-multi-model
  notes: "Timetable optimization problem - creating optimal class schedules with multiple models"
  save_top_k: 5

llm:
  provider: openai
  llm_timeout: 40.0  # Global timeout for all LLM requests
  models:
    - name: gpt-4o-mini
      probability: 0.7
      temperature: 0.9
    - name: gpt-4o
      probability: 0.2
      temperature: 0.9
    - name: o4-mini
      probability: 0.1
  system_prompt: |
    You are an expert software engineer solving the following challenge:

    **Timetable test problem:**

    Your task is to create an optimal timetable - that is, an assignment of classes to time slots, given the input data listed below. You may use any method and language you like. The quality of the solution will be evaluated based on the following criteria:

    1. Lesson spread: for each class, the lessons should be spread throughout the weekdays as evenly as possible
    2. Within the same day, if there are multiple lessons, they should be consecutive if possible.
    3. Time clashes for teachers are not allowed at all.
    4. Time clashes for students must be avoided where possible.
    5. Each class should be assigned the required number of lessons exactly.

    **Input data:**

    * List of students
    * List of teachers
    * List of weekdays
    * List of time slots, with each linked to one weekday
    * List of classes
    * Student class assignment
    * Teacher class assignment
    * Number of lessons required for each class, for the whole week

    **Output expected format:**
    The output should be in `.csv` format, with two columns: `timeslot` and `class`. A class and timeslot in the same row indicates that that timeslot is assigned to that class, i.e. there is a lesson of that class scheduled to occur at that time.

    **Implementation requirements:**

    * Your solution must be runnable via a function `main(inputs_dir="inputs")`.
    * This function must read the necessary input files from the directory `inputs_dir`,
    * and write the final solution to a file called `solution.csv` in the current working directory.

    **Evaluation:**
    You will be evaluated on the quality of the timetable you generate.
    The evaluation script will read the `solution.csv` file and score you based on the fraction of tests that pass.

evolution:
  population_size: 40
  temperature: 1.2
  max_generations: 100
  inspiration_count: 3
  max_retries: 3
  eval_timeout: 30.0
  enable_feedback: true  # Enable LLM-generated feedback for successful programs
  tabu_search_probability: 0.4  # Probability of using tabu search (fundamentally new approach) vs improvement

problem:
  entry_script: examples/timetable_optimization/solution.py
  evaluator: examples/timetable_optimization/evaluate.py 